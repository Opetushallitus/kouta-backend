name: Kouta-backend

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '**.md'

jobs:
  test_and_build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'corretto'
          cache: 'maven'

      - uses: szenius/set-timezone@v1.1
        with:
          timezoneLinux: "Europe/Helsinki"

      - name: Start postgres container
        run: |
          cd kouta-backend/postgresql/docker
          docker build --tag kouta-postgres .
          docker pull localstack/localstack:1.0.4

      - name: Build with Maven
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          set -euo pipefail
          git clone https://github.com/Opetushallitus/ci-tools.git
          source ci-tools/common/setup-tools.sh
          mvn clean package -B
        
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: | 
            kouta-backend/target
            ovara-kouta/target
          key: ${{ github.sha }}

      - uses: actions/cache@v3
        id: ci-tools
        with:
          path: ci-tools
          key: ${{ github.sha }}

  deploy_image:
    runs-on: ubuntu-latest
    needs: test_and_build

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: restore-build
        with:
          path: |
            kouta-backend/target
            ovara-kouta/target
          key: ${{ github.sha }}

      - uses: actions/cache@v3
        id: ci-tools
        with:
          path: ci-tools
          key: ${{ github.sha }}

      - name: Build Docker container
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          set -euo pipefail
          export ARTIFACT_NAME="kouta-backend"
          export OVARA_EXPORTER_NAME="ovara-kouta"
          export BASE_IMAGE="baseimage-fatjar-openjdk11:master"
          source ci-tools/common/setup-tools.sh

          mv kouta-backend/target/kouta-backend-*-jar-with-dependencies.jar $DOCKER_BUILD_DIR/artifact/${ARTIFACT_NAME}.jar
          cp -vr kouta-backend/src/main/resources/* $DOCKER_BUILD_DIR/config/
          ./ci-tools/common/pull-image.sh
          ./ci-tools/github-build/build-fatjar.sh $ARTIFACT_NAME

          ./ci-tools/common/clean-docker-build-dir.sh
          
          mv ovara-kouta/target/ovara-kouta-*-jar-with-dependencies.jar $DOCKER_BUILD_DIR/artifact/${OVARA_EXPORTER_NAME}.jar
          cp -vr ovara-kouta/src/main/resources/* $DOCKER_BUILD_DIR/config/
          cp -v kouta-backend/src/main/resources/oph-configuration/kouta-backend.properties.template $DOCKER_BUILD_DIR/config/oph-configuration/
          cat $DOCKER_BUILD_DIR/config/oph-configuration/ovara-kouta.additional.properties.template $DOCKER_BUILD_DIR/config/oph-configuration/kouta-backend.properties.template
          rm $DOCKER_BUILD_DIR/config/oph-configuration/ovara-kouta.additional.properties.template
          ./ci-tools/common/pull-image.sh
          ./ci-tools/github-build/build-fatjar.sh $OVARA_EXPORTER_NAME

          ./ci-tools/github-build/upload-image.sh $ARTIFACT_NAME
          ./ci-tools/github-build/upload-image.sh $OVARA_EXPORTER_NAME

  deploy_to_artifactory:
    runs-on: ubuntu-latest
    needs: test_and_build
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: ci-tools
        with:
          path: ci-tools
          key: ${{ github.sha }}

      - name: Deploy to artifactory
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn deploy -DskipTests --settings ci-tools/common/maven-settings.xml
